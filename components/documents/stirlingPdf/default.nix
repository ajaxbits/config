{
  config,
  pkgs,
  lib,
  ...
}: let
  inherit (lib) mkIf mkOverride;
  cfg = config.components.documents.stirlingPdf;

  version = "0.20.1";
  configDir = "/data/config/stirling-pdf/extraConfigs";
  internalPort = 8124;
  internalAddress =
    if config.components.caddy.enable
    then "127.0.0.1:${toString internalPort}"
    else "0.0.0.0:${toString internalPort}}";
in {
  config = mkIf cfg.enable {
    virtualisation.docker = {
      enable = true;
      autoPrune.enable = true;
    };
    virtualisation.oci-containers.backend = "docker";

    virtualisation.oci-containers.containers."stirling-pdf-stirling-pdf" = {
      image = "frooodle/s-pdf:${version}";
      environment = {
        DOCKER_ENABLE_SECURITY = "false";
      };
      volumes = [
        "${configDir}:/configs:rw"
      ];
      ports = [
        "${internalAddress}:8080/tcp"
      ];
      log-driver = "journald";
      extraOptions = [
        "--network-alias=stirling-pdf"
        "--network=stirling-pdf-default"
      ];
    };
    systemd.services."docker-stirling-pdf-stirling-pdf" = {
      serviceConfig.Restart = mkOverride 500 "no";
      after = ["docker-network-stirling-pdf-default.service"];
      requires = ["docker-network-stirling-pdf-default.service"];
      partOf = ["docker-compose-stirling-pdf-root.target"];
      wantedBy = ["docker-compose-stirling-pdf-root.target"];
    };

    systemd.services."docker-network-stirling-pdf-default" = {
      path = [pkgs.docker];
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
        ExecStop = "${pkgs.docker}/bin/docker network rm -f stirling-pdf-default";
      };
      script = ''
        ${pkgs.docker}/bin/docker network inspect stirling-pdf-default || ${pkgs.docker}/bin/docker network create stirling-pdf-default
      '';
      partOf = ["docker-compose-stirling-pdf-root.target"];
      wantedBy = ["docker-compose-stirling-pdf-root.target"];
    };

    systemd.targets."docker-compose-stirling-pdf-root" = {
      unitConfig.Description = "Root target generated by compose2nix.";
      wantedBy = ["multi-user.target"];
    };

    services.caddy.virtualHosts."https://pdf.ajax.casa" = mkIf config.components.caddy.enable {
      extraConfig =
        ''
          encode gzip zstd
          reverse_proxy http://127.0.0.1:${toString config.services.paperless.port}
        ''
        + (
          if config.components.caddy.cloudflare.enable
          then ''
            import cloudflare
          ''
          else ''
            tls internal
          ''
        );
    };
  };
}
