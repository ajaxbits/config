{
  config,
  pkgs,
  lib,
  self,
  ...
}: let
  inherit (lib) mkEnableOption optionalString;
  cfg = config.components.bookmarks;
  cfgCaddy = config.components.caddy;

  configDir = "/data/config";
  port = 9923;

  endpoint =
    if cfgCaddy.enable
    then "0.0.0.0:${toString port}"
    else "127.0.0.1:${toString port}";
  url = "https://links.${config.networking.domain}";
in {
  options.components.bookmarks = {
    enable = mkEnableOption "Enable bookmark management.";
  };

  config = {
    users = {
      users.linkding = {
        isSystemUser = true;
        group = config.users.groups.linkding.name;
        extraGroups = [config.users.groups.configoperators.name];
      };
      groups = {
        configoperators = {};
        linkding = {};
      };
    };

    virtualisation = {
      docker = {
        enable = true;
        autoPrune.enable = true;
      };
      oci-containers.backend = "docker";

      oci-containers.containers."linkding" = let
        user = config.users.users.linkding;
        inherit (user) uid;
        inherit (config.users.groups.${user.group}) gid;
      in {
        image = "sissbruecker/linkding:latest";
        user = "${toString uid}:${toString gid}";
        environment = {
          LD_CONTAINER_NAME = "linkding";
          LD_DISABLE_BACKGROUND_TASKS = "False";
          LD_DISABLE_URL_VALIDATION = "False";
          LD_ENABLE_AUTH_PROXY = "False";
          LD_HOST_DATA_DIR = "${configDir}/linkding";
          LD_HOST_PORT = toString port;
        };
        environmentFiles = ["${config.age.secretsDir}/linkding/.env"];
        volumes = ["${configDir}/linkding:/etc/linkding/data:rw"];
        ports = ["${endpoint}:9090/tcp"];
        log-driver = "journald";
        extraOptions = [
          "--network-alias=linkding"
          "--network=linkding_default"
        ];
      };
    };

    systemd = {
      services."docker-linkding" = {
        serviceConfig = {
          Restart = lib.mkOverride 500 "always";
          RestartMaxDelaySec = lib.mkOverride 500 "1m";
          RestartSec = lib.mkOverride 500 "100ms";
          RestartSteps = lib.mkOverride 500 9;
        };
        after = ["docker-network-linkding_default.service"];
        requires = ["docker-network-linkding_default.service"];
        partOf = ["docker-compose-linkding-root.target"];
        wantedBy = ["docker-compose-linkding-root.target"];
      };

      services."docker-network-linkding_default" = {
        path = [pkgs.docker];
        serviceConfig = {
          Type = "oneshot";
          RemainAfterExit = true;
          ExecStop = "${pkgs.docker}/bin/docker network rm -f linkding_default";
        };
        script = ''
          docker network inspect linkding_default || docker network create linkding_default
        '';
        partOf = ["docker-compose-linkding-root.target"];
        wantedBy = ["docker-compose-linkding-root.target"];
      };

      targets."docker-compose-linkding-root" = {
        unitConfig = {
          Description = "Root target generated by compose2nix.";
        };
        wantedBy = ["multi-user.target"];
      };
    };

    age.secrets = {
      "linkding/.env" = {
        file = "${self}/secrets/linkding/.env.age";
        mode = "440";
        owner = config.users.users.linkding.name;
        inherit (config.users.users.linkding) group;
      };
    };
  };

  config.services.caddy.virtualHosts.${url}.extraConfig = optionalString (cfg.enable && cfgCaddy.enable) ''
    encode gzip zstd
    reverse_proxy http://127.0.0.1:${toString port}
    import cloudflare
  '';
}
