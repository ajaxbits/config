on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
jobs:
  update_version:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - uses: cachix/install-nix-action@v20
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}

    - id: audiobookshelfLatest
      name: Get latest Audiobookshelf release
      uses: pozetroninc/github-action-get-latest-release@master
      with:
        owner: advplyr
        repo: audiobookshelf
        excludes: prerelease, draft

    - id: libationLatest
      name: Get latest Libation release
      uses: pozetroninc/github-action-get-latest-release@master
      with:
        owner: rmcrackan
        repo: libation
        excludes: prerelease, draft

    - name: Update version
      run: |
        # Get current version
        CURRENT_VERSION=$(nix-instantiate --eval -E '
          let
            nixFile = import services/audiobookshelf/default.nix { host = ""; };
          in
            builtins.toJSON (nixFile { config.age.secretsDir = ""; self = ""; })
          ' | jq -r | jq '.virtualisation.arion.projects.audiobookshelf.settings.services.audiobookshelf.service.image'
        )

        LATEST_VERSION=${{ steps.audiobookshelfLatest.outputs.release }}

        echo "Current version: $CURRENT_VERSION"
        echo "Latest version: $LATEST_VERSION"

        if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
          sed -i "s/$CURRENT_VERSION/$LATEST_VERSION/g" services/audiobookshelf/default.nix
          echo "::set-output name=version_updated::true"
        else
          echo "Version is up to date. No changes to commit."
          echo "::set-output name=version_updated::false"
        fi

  other_steps:
    needs: update_version
    if: needs.update_version.outputs.version_updated == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        add-paths: |
          services/audiobookshelf/* 
